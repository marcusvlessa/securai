import { toast } from 'sonner';
import * as XLSX from 'xlsx';
import { makeGroqAIRequest } from '@/services/groqService';

// Tipos para an√°lise de v√≠nculos
export interface LinkNode {
  id: string;
  label: string;
  type: string;
  properties: Record<string, string | number | boolean>;
  degree: number;
  centrality: number;
}

export interface LinkEdge {
  id: string;
  source: string;
  target: string;
  label: string;
  type: string;
  weight: number;
  properties: Record<string, string | number | boolean>;
}

export interface LinkGraph {
  nodes: LinkNode[];
  edges: LinkEdge[];
  metadata: {
    totalNodes: number;
    totalEdges: number;
    nodeTypes: string[];
    edgeTypes: string[];
    density: number;
    averageDegree: number;
  };
}

export interface ParsedData {
  data: Record<string, string | number | boolean>[];
  columns: string[];
  preview: Record<string, string | number | boolean>[];
  totalRows: number;
  fileInfo: {
    name: string;
    type: string;
    size: number;
    lastModified: Date;
  };
}

// Parser robusto para diferentes tipos de arquivo
export class LinkAnalysisParser {
  
  // Parse CSV com detec√ß√£o autom√°tica de delimitador
  static async parseCSV(file: File): Promise<ParsedData> {
    try {
      console.log('üîç Iniciando parsing CSV:', file.name);

      const text = await file.text();
      const lines = text.split('\n').filter(line => line.trim());

      if (lines.length < 2) {
        throw new Error('Arquivo CSV deve ter pelo menos cabe√ßalho e uma linha de dados');
      }

      // Detectar delimitador automaticamente
      const delimiters = [',', ';', '\t', '|'];
      let bestDelimiter = ',';
      let maxColumns = 0;

      for (const delimiter of delimiters) {
        const columns = lines[0].split(delimiter).length;
        if (columns > maxColumns) {
          maxColumns = columns;
          bestDelimiter = delimiter;
        }
      }

      console.log(`üîç Delimitador detectado: "${bestDelimiter}" (${maxColumns} colunas)`);

      // Parse do cabe√ßalho
      const headers = lines[0].split(bestDelimiter).map(h => h.trim().replace(/"/g, ''));

      // Parse dos dados
      const data = [];
      for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(bestDelimiter);
        const row: Record<string, string | number | boolean> = {};

        headers.forEach((header, index) => {
          let value = values[index] || '';
          value = value.trim().replace(/"/g, '');

          // Tentar converter para n√∫mero se poss√≠vel
          if (!isNaN(Number(value)) && value !== '') {
            row[header] = Number(value);
          } else {
            row[header] = value;
          }
        });

        // S√≥ adicionar linha se tiver pelo menos 2 valores n√£o vazios
        const nonEmptyValues = Object.values(row).filter(v => v !== '' && v !== null && v !== undefined);
        if (nonEmptyValues.length >= 2) {
          data.push(row);
        }
      }

      const preview = data.slice(0, 5);

      console.log(`‚úÖ CSV parseado com sucesso: ${data.length} linhas, ${headers.length} colunas`);
      console.log('üìä Cabe√ßalhos:', headers);
      console.log('üìã Preview dos dados:', preview);

      return {
        data,
        columns: headers,
        preview,
        totalRows: data.length,
        fileInfo: {
          name: file.name,
          type: file.type,
          size: file.size,
          lastModified: new Date(file.lastModified)
        }
      };

    } catch (error) {
      console.error('‚ùå Erro ao parsear CSV:', error);
      throw new Error(`Falha ao processar arquivo CSV: ${error.message}`);
    }
  }

  // Parse Excel
  static async parseExcel(file: File): Promise<ParsedData> {
    try {
      console.log('üîç Iniciando parsing Excel:', file.name);
      
      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });
      
      // Pegar a primeira planilha
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      if (!worksheet) {
        throw new Error('Planilha n√£o encontrada');
      }
      
      // Converter para JSON
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      if (jsonData.length < 2) {
        throw new Error('Planilha deve ter pelo menos cabe√ßalho e uma linha de dados');
      }
      
      // Primeira linha como cabe√ßalho
      const headers = (jsonData[0] as any[]).map(h => String(h || '').trim()).filter(h => h);
      
      // Dados das linhas seguintes
      const data = [];
      for (let i = 1; i < jsonData.length; i++) {
        const rowData = jsonData[i] as any[];
        if (!rowData || rowData.length === 0) continue;
        
        const row: Record<string, string | number | boolean> = {};
        let hasValidData = false;
        
        headers.forEach((header, index) => {
          let value = rowData[index];
          
          // Converter valor
          if (value === null || value === undefined) {
            value = '';
          } else if (typeof value === 'number') {
            row[header] = value;
            hasValidData = true;
          } else {
            const strValue = String(value).trim();
            row[header] = strValue;
            if (strValue) hasValidData = true;
          }
        });
        
        // S√≥ adicionar se tiver pelo menos 2 valores v√°lidos
        if (hasValidData && Object.values(row).filter(v => v !== '' && v !== null && v !== undefined).length >= 2) {
          data.push(row);
        }
      }
      
      const preview = data.slice(0, 5);

      console.log(`‚úÖ Excel parseado com sucesso: ${data.length} linhas, ${headers.length} colunas`);
      console.log('üìä Cabe√ßalhos:', headers);
      console.log('üìã Preview dos dados:', preview);

      return {
        data,
        columns: headers,
        preview,
        totalRows: data.length,
        fileInfo: {
          name: file.name,
          type: file.type,
          size: file.size,
          lastModified: new Date(file.lastModified)
        }
      };

    } catch (error) {
      console.error('‚ùå Erro ao parsear Excel:', error);
      throw new Error(`Falha ao processar arquivo Excel: ${error.message}`);
    }
  }

  // Parse JSON
  static async parseJSON(file: File): Promise<ParsedData> {
    try {
      console.log('üîç Iniciando parsing JSON:', file.name);
      
      const text = await file.text();
      const jsonData = JSON.parse(text);
      
      let data: Record<string, string | number | boolean>[] = [];
      let columns: string[] = [];
      
      // Se for um array de objetos
      if (Array.isArray(jsonData)) {
        if (jsonData.length > 0 && typeof jsonData[0] === 'object') {
          data = jsonData;
          columns = Object.keys(jsonData[0]);
        } else {
          throw new Error('JSON deve conter um array de objetos');
        }
      }
      // Se for um objeto com propriedades
      else if (typeof jsonData === 'object') {
        // Tentar encontrar arrays de dados
        for (const [key, value] of Object.entries(jsonData)) {
          if (Array.isArray(value) && value.length > 0 && typeof value[0] === 'object') {
            data = value;
            columns = Object.keys(value[0]);
            break;
          }
        }
        
        if (data.length === 0) {
          throw new Error('JSON deve conter dados tabulares (array de objetos)');
        }
      }
      
              // Filtrar linhas com pelo menos 2 valores v√°lidos
        data = data.filter((row: Record<string, string | number | boolean>) => {
          const validValues = Object.values(row).filter(v => v !== '' && v !== null && v !== undefined);
          return validValues.length >= 2;
        });
      
      const preview = data.slice(0, 5);

      console.log(`‚úÖ JSON parseado com sucesso: ${data.length} linhas, ${columns.length} colunas`);
      console.log('üìä Colunas:', columns);
      console.log('üìã Preview dos dados:', preview);

      return {
        data,
        columns,
        preview,
        totalRows: data.length,
        fileInfo: {
          name: file.name,
          type: file.type,
          size: file.size,
          lastModified: new Date(file.lastModified)
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao parsear JSON:', error);
      throw new Error(`Falha ao processar arquivo JSON: ${error.message}`);
    }
  }
  
  // Parse TXT com detec√ß√£o autom√°tica de formato
  static async parseTXT(file: File): Promise<ParsedData> {
    try {
      console.log('üîç Iniciando parsing TXT:', file.name);
      
      const text = await file.text();
      const lines = text.split('\n').filter(line => line.trim());
      
      if (lines.length < 2) {
        throw new Error('Arquivo TXT deve ter pelo menos cabe√ßalho e uma linha de dados');
      }
      
      // Tentar detectar se √© CSV com delimitador espec√≠fico
      const firstLine = lines[0];
      const delimiters = [',', ';', '\t', '|'];
      
      for (const delimiter of delimiters) {
        if (firstLine.includes(delimiter)) {
          console.log(`üîç Detectado formato CSV com delimitador: "${delimiter}"`);
          // Recriar arquivo tempor√°rio como CSV
          const csvBlob = new Blob([text], { type: 'text/csv' });
          const csvFile = new File([csvBlob], file.name.replace('.txt', '.csv'), { type: 'text/csv' });
          return this.parseCSV(csvFile);
        }
      }
      
      // Se n√£o for CSV, tratar como dados separados por espa√ßos
      const headers = firstLine.split(/\s+/).filter(h => h.trim());
      const data = [];
      
      for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(/\s+/).filter(v => v.trim());
        if (values.length >= headers.length) {
          const row: Record<string, string | number | boolean> = {};
          headers.forEach((header, index) => {
            let value = values[index] || '';
            
            // Tentar converter para n√∫mero
            if (!isNaN(Number(value)) && value !== '') {
              row[header] = Number(value);
            } else {
              row[header] = value;
            }
          });
          
          // S√≥ adicionar se tiver pelo menos 2 valores v√°lidos
          const validValues = Object.values(row).filter(v => v !== '' && v !== null && v !== undefined);
          if (validValues.length >= 2) {
            data.push(row);
          }
        }
      }
      
      const preview = data.slice(0, 5);

      console.log(`‚úÖ TXT parseado com sucesso: ${data.length} linhas, ${headers.length} colunas`);
      console.log('üìä Cabe√ßalhos:', headers);
      console.log('üìã Preview dos dados:', preview);

      return {
        data,
        columns: headers,
        preview,
        totalRows: data.length,
        fileInfo: {
          name: file.name,
          type: file.type,
          size: file.size,
          lastModified: new Date(file.lastModified)
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao parsear TXT:', error);
      throw new Error(`Falha ao processar arquivo TXT: ${error.message}`);
    }
  }
  
  // Parser principal que detecta o tipo de arquivo
  static async parseFile(file: File): Promise<ParsedData> {
    try {
      const fileName = file.name.toLowerCase();
      const fileExtension = fileName.split('.').pop();
      
      console.log(`üîç Processando arquivo: ${file.name} (${file.type || fileExtension})`);
      
      // CSV
      if (file.type === 'text/csv' || fileExtension === 'csv') {
        return await this.parseCSV(file);
      }
      
      // Excel
      else if (file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || 
               file.type === 'application/vnd.ms-excel' ||
               fileExtension === 'xlsx' || fileExtension === 'xls') {
        return await this.parseExcel(file);
      }
      
      // JSON
      else if (file.type === 'application/json' || fileExtension === 'json') {
        return await this.parseJSON(file);
      }
      
      // TXT
      else if (file.type === 'text/plain' || fileExtension === 'txt') {
        return await this.parseTXT(file);
      }
      
      else {
        throw new Error(`Formato de arquivo n√£o suportado: ${file.type || fileExtension}. Use CSV, Excel, JSON ou TXT.`);
      }
      
    } catch (error) {
      console.error('‚ùå Erro no parsing do arquivo:', error);
      throw error;
    }
  }
}

// Gerador de grafos para an√°lise de v√≠nculos
export class LinkGraphGenerator {
  
  // Gerar grafo a partir de dados parseados
  static generateGraph(
    data: Record<string, string | number | boolean>[],
    sourceColumn: string,
    targetColumn: string,
    relationshipColumn?: string,
    weightColumn?: string
  ): LinkGraph {
    console.log('üîç Gerando grafo de v√≠nculos...');
    console.log('üìä Dados recebidos:', { data, sourceColumn, targetColumn, relationshipColumn, weightColumn });
    
    const nodes = new Map<string, LinkNode>();
    const edges: LinkEdge[] = [];
    const nodeTypes = new Set<string>();
    const edgeTypes = new Set<string>();
    
    let processedRows = 0;
    let ignoredRows = 0;
    
    // Processar cada linha de dados
    data.forEach((row, index) => {
      const source = String(row[sourceColumn] || '').trim();
      const target = String(row[targetColumn] || '').trim();
      const relationship = relationshipColumn ? String(row[relationshipColumn] || '').trim() : 'relacionamento';
      const weight = weightColumn ? row[weightColumn] : undefined;
      
      console.log(`üîç Processando linha ${index + 1}:`, { source, target, relationship, weight });
      
      // Valida√ß√£o mais rigorosa dos dados
      if (!source || !target) {
        console.log(`‚ö†Ô∏è Linha ${index + 1} ignorada: origem ou destino vazio`, { source, target });
        ignoredRows++;
        return;
      }
      
      if (source === target) {
        console.log(`‚ö†Ô∏è Linha ${index + 1} ignorada: origem igual ao destino`, { source, target });
        ignoredRows++;
        return;
      }
      
      // Verificar se os valores s√£o muito curtos ou muito longos
      if (source.length < 2 || target.length < 2) {
        console.log(`‚ö†Ô∏è Linha ${index + 1} ignorada: valores muito curtos`, { source, target });
        ignoredRows++;
        return;
      }
      
      if (source.length > 100 || target.length > 100) {
        console.log(`‚ö†Ô∏è Linha ${index + 1} ignorada: valores muito longos`, { source, target });
        ignoredRows++;
        return;
      }
      
      // Verificar se s√£o valores placeholder ou inv√°lidos
      const invalidValues = ['-', 'N/A', 'null', 'undefined', 'nan', 'none', '', ' ', '  '];
      if (invalidValues.includes(source.toLowerCase()) || invalidValues.includes(target.toLowerCase())) {
        console.log(`‚ö†Ô∏è Linha ${index + 1} ignorada: valor placeholder ou inv√°lido`, { source, target });
        ignoredRows++;
        return;
      }
      
      // Se passou por todas as valida√ß√µes, processar a linha
      processedRows++;
      
      // Criar ou atualizar n√≥s com detec√ß√£o autom√°tica de tipo
      const sourceNode = this.addOrUpdateNode(nodes, source, nodeTypes);
      const targetNode = this.addOrUpdateNode(nodes, target, nodeTypes);
      
      // Criar aresta
      const edge: LinkEdge = {
        id: `edge-${source}-${target}-${index}`,
        source,
        target,
        label: relationship || 'relacionamento',
        type: relationship || 'relacionamento',
        weight: weight !== undefined ? Number(weight) : 1,
        properties: {
          weight: weight !== undefined ? Number(weight) : 1,
          source: source,
          target: target,
          relationship: relationship || 'relacionamento'
        }
      };
      
      edges.push(edge);
      edgeTypes.add(edge.type);
      
      // Atualizar graus dos n√≥s
      if (sourceNode.degree !== undefined) sourceNode.degree++;
      if (targetNode.degree !== undefined) targetNode.degree++;
      
      console.log(`‚úÖ Linha ${index + 1} processada:`, { source, target, relationship });
    });
    
    console.log(`üìä Resumo do processamento: ${processedRows} linhas processadas, ${ignoredRows} ignoradas`);
    
    // Calcular m√©tricas do grafo
    const totalNodes = nodes.size;
    const totalEdges = edges.length;
    
    // Calcular densidade e grau m√©dio
    let density = 0;
    let averageDegree = 0;
    
    if (totalNodes > 1) {
      const maxEdges = totalNodes * (totalNodes - 1);
      density = totalEdges / maxEdges;
      
      const totalDegree = Array.from(nodes.values()).reduce((sum, node) => sum + (node.degree || 0), 0);
      averageDegree = totalDegree / totalNodes;
    }
    
    // Calcular centralidade para cada n√≥
    const nodeArray = Array.from(nodes.values());
    nodeArray.forEach(node => {
      if (node.degree !== undefined) {
        node.centrality = node.degree / (totalNodes - 1);
      }
    });
    
    console.log('‚úÖ Grafo gerado com sucesso:', { totalNodes, totalEdges, density, averageDegree });
    console.log('üìä Tipos de n√≥s:', Array.from(nodeTypes));
    console.log('üìä Tipos de arestas:', Array.from(edgeTypes));
    
    return {
      nodes: nodeArray,
      edges,
      metadata: {
        totalNodes,
        totalEdges,
        density,
        averageDegree,
        nodeTypes: Array.from(nodeTypes),
        edgeTypes: Array.from(edgeTypes)
      }
    };
  }
  
  
  // Detectar tipo de entidade automaticamente
  private static detectEntityType(value: string): string {
    const normalized = value.replace(/[^\w@.-]/g, '');
    
    // CPF: 11 d√≠gitos
    if (/^\d{11}$/.test(normalized)) {
      return 'cpf';
    }
    
    // CNPJ: 14 d√≠gitos
    if (/^\d{14}$/.test(normalized)) {
      return 'cnpj';
    }
    
    // Telefone: 10-11 d√≠gitos come√ßando com DDD
    if (/^[1-9]\d{9,10}$/.test(normalized)) {
      return 'telefone';
    }
    
    // Email
    if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
      return 'email';
    }
    
    // Placa de ve√≠culo
    if (/^[A-Z]{3}[\d][A-Z]\d{2}$/.test(normalized.toUpperCase()) || /^[A-Z]{3}\d{4}$/.test(normalized.toUpperCase())) {
      return 'placa';
    }
    
    // Endere√ßo (cont√©m palavras como rua, av, etc)
    if (/(rua|avenida|av|alameda|travessa|pra√ßa|estrada|rodovia|r\.|av\.|al\.|tr\.|pr\.|est\.|rod\.)/i.test(value)) {
      return 'endereco';
    }
    
    // Padr√£o: entidade gen√©rica
    return 'entidade';
  }

  // Adicionar ou atualizar n√≥ no Map
  private static addOrUpdateNode(
    nodes: Map<string, LinkNode>,
    nodeId: string,
    nodeTypes: Set<string>
  ): LinkNode {
    let node = nodes.get(nodeId);
    
    if (!node) {
      // Detectar tipo automaticamente
      const nodeType = this.detectEntityType(nodeId);
      
      node = {
        id: nodeId,
        label: nodeId,
        type: nodeType,
        properties: {},
        degree: 0,
        centrality: 0
      };
      
      nodes.set(nodeId, node);
      nodeTypes.add(nodeType);
    }
    
    return node;
  }
}

// Servi√ßo principal de an√°lise de v√≠nculos
export class LinkAnalysisService {
  
  // Analisar arquivo e gerar grafo
  static async analyzeFile(file: File): Promise<{ parsedData: ParsedData; graph: LinkGraph }> {
    try {
      console.log('üöÄ Iniciando an√°lise de v√≠nculos para:', file.name);
      
      // Parse do arquivo
      const parsedData = await LinkAnalysisParser.parseFile(file);
      
      // Validar dados
      if (parsedData.data.length === 0) {
        throw new Error('Arquivo n√£o cont√©m dados v√°lidos');
      }
      
      if (parsedData.columns.length < 2) {
        throw new Error('Arquivo deve ter pelo menos 2 colunas para an√°lise de v√≠nculos');
      }
      
      console.log('üìä Dados parseados v√°lidos:', {
        totalRows: parsedData.totalRows,
        columns: parsedData.columns,
        sampleData: parsedData.data.slice(0, 3)
      });
      
      // Detec√ß√£o inteligente de colunas para an√°lise de v√≠nculos
      const { sourceColumn, targetColumn, relationshipColumn, weightColumn } = this.detectColumnsForAnalysis(parsedData.columns, parsedData.data);
      
      console.log('üîç Colunas detectadas automaticamente:', {
        sourceColumn,
        targetColumn,
        relationshipColumn,
        weightColumn
      });
      
      // Gerar grafo com colunas detectadas
      const graph = LinkGraphGenerator.generateGraph(
        parsedData.data,
        sourceColumn,
        targetColumn,
        relationshipColumn,
        weightColumn
      );
      
      console.log('‚úÖ An√°lise de v√≠nculos conclu√≠da com sucesso');
      
      return { parsedData, graph };
      
    } catch (error) {
      console.error('‚ùå Erro na an√°lise de v√≠nculos:', error);
      throw error;
    }
  }
  
  // Detectar automaticamente colunas apropriadas para an√°lise de v√≠nculos
  private static detectColumnsForAnalysis(columns: string[], data: Record<string, string | number | boolean>[]): {
    sourceColumn: string;
    targetColumn: string;
    relationshipColumn?: string;
    weightColumn?: string;
  } {
    console.log('üîç Detectando colunas para an√°lise de v√≠nculos...');
    console.log('üìä Colunas dispon√≠veis:', columns);
    console.log('üìä Total de linhas de dados:', data.length);
    
    // Analisar o conte√∫do real dos dados para identificar tipos de colunas
    const columnAnalysis = this.analyzeColumnContent(columns, data);
    console.log('üîç An√°lise de conte√∫do das colunas:', columnAnalysis);
    
    // Padr√µes expandidos para identificar tipos de colunas
    const cpfCnpjPatterns = /(cpf|cnpj|documento|identificacao|rif|id|codigo|numero|matricula)/i;
    const namePatterns = /(nome|beneficiario|remetente|titular|responsavel|pessoa|entidade|empresa|cliente|fornecedor|destinatario|emissor)/i;
    const valuePatterns = /(valor|montante|quantia|preco|custo|peso|forca|intensidade|frequencia|importancia|relevancia)/i;
    const relationshipPatterns = /(tipo|relacao|relacionamento|operacao|acao|vinculo|status|categoria|funcao|papel|atividade)/i;
    const datePatterns = /(data|periodo|data_periodo|data_periodo|hora|tempo|inicio|fim|duracao)/i;
    
    // Padr√µes espec√≠ficos para o arquivo de exemplo
    const sourcePatterns = /(origem|source|from|de|pessoa|entidade|remetente|beneficiario|emissor|primeiro|inicio|partida)/i;
    const targetPatterns = /(destino|target|to|para|relacionado|conectado|nome|receptor|destinatario|segundo|fim|chegada)/i;
    
    let sourceColumn = '';
    let targetColumn = '';
    let relationshipColumn: string | undefined;
    let weightColumn: string | undefined;
    
    // Estrat√©gia 1: Procurar por padr√µes espec√≠ficos de origem/destino
    const sourceColumns = columns.filter(col => sourcePatterns.test(col));
    if (sourceColumns.length > 0) {
      sourceColumn = sourceColumns[0];
      console.log(`‚úÖ Coluna de origem detectada (padr√£o espec√≠fico): ${sourceColumn}`);
    }
    
    const targetColumns = columns.filter(col => targetPatterns.test(col));
    if (targetColumns.length > 0) {
      targetColumn = targetColumns[0];
      console.log(`‚úÖ Coluna de destino detectada (padr√£o espec√≠fico): ${targetColumn}`);
    }
    
    // Estrat√©gia 2: Usar an√°lise de conte√∫do para identificar colunas
    if (!sourceColumn || !targetColumn) {
      const { sourceCol, targetCol } = this.selectColumnsByContent(columnAnalysis);
      if (!sourceColumn && sourceCol) {
        sourceColumn = sourceCol;
        console.log(`‚úÖ Coluna de origem detectada (an√°lise de conte√∫do): ${sourceColumn}`);
      }
      if (!targetColumn && targetCol) {
        targetColumn = targetCol;
        console.log(`‚úÖ Coluna de destino detectada (an√°lise de conte√∫do): ${targetColumn}`);
      }
    }
    
    // Estrat√©gia 3: Procurar por CPF/CNPJ como origem (se n√£o encontrou padr√£o espec√≠fico)
    if (!sourceColumn) {
      const cpfCnpjColumns = columns.filter(col => cpfCnpjPatterns.test(col));
      if (cpfCnpjColumns.length > 0) {
        sourceColumn = cpfCnpjColumns[0];
        console.log(`‚úÖ Coluna de origem detectada (CPF/CNPJ): ${sourceColumn}`);
      }
    }
    
    // Estrat√©gia 4: Procurar por nomes como destino (se n√£o encontrou padr√£o espec√≠fico)
    if (!targetColumn) {
      const nameColumns = columns.filter(col => namePatterns.test(col));
      if (nameColumns.length > 0) {
        targetColumn = nameColumns[0];
        console.log(`‚úÖ Coluna de destino detectada (Nome): ${targetColumn}`);
      }
    }
    
    // Estrat√©gia 5: Busca por sin√¥nimos e varia√ß√µes comuns
    if (!sourceColumn || !targetColumn) {
      const { sourceCol, targetCol } = this.findColumnsBySynonyms(columns, columnAnalysis);
      if (!sourceColumn && sourceCol) {
        sourceColumn = sourceCol;
        console.log(`‚úÖ Coluna de origem detectada (sin√¥nimos): ${sourceColumn}`);
      }
      if (!targetColumn && targetCol) {
        targetColumn = targetCol;
        console.log(`‚úÖ Coluna de destino detectada (sin√¥nimos): ${targetColumn}`);
      }
    }
    
    // Fallback: usar primeira e segunda coluna se n√£o encontrou nada
    if (!sourceColumn) {
      sourceColumn = columns[0];
      console.log(`‚ö†Ô∏è Usando primeira coluna como origem: ${sourceColumn}`);
    }
    
    if (!targetColumn) {
      targetColumn = columns[1];
      console.log(`‚ö†Ô∏è Usando segunda coluna como destino: ${targetColumn}`);
    }
    
    // Procurar por coluna de relacionamento
    const relColumns = columns.filter(col => relationshipPatterns.test(col));
    if (relColumns.length > 0) {
      relationshipColumn = relColumns[0];
      console.log(`‚úÖ Coluna de relacionamento detectada: ${relationshipColumn}`);
    }
    
    // Procurar por coluna de peso/valor
    const weightColumns = columns.filter(col => valuePatterns.test(col));
    if (weightColumns.length > 0) {
      weightColumn = weightColumns[0];
      console.log(`‚úÖ Coluna de peso/valor detectada: ${weightColumn}`);
    }
    
    // Se n√£o encontrou relacionamento, usar uma coluna padr√£o
    if (!relationshipColumn) {
      // Procurar por colunas que podem indicar tipo de opera√ß√£o
      const operationColumns = columns.filter(col => 
        /(remetente|beneficiario|tipo|status|observacoes|categoria|operacao|acao|funcao)/i.test(col)
      );
      if (operationColumns.length > 0) {
        relationshipColumn = operationColumns[0];
        console.log(`‚úÖ Coluna de relacionamento alternativa detectada: ${relationshipColumn}`);
      }
    }
    
    // Se n√£o encontrou peso, usar uma coluna num√©rica
    if (!weightColumn) {
      const numericColumns = columns.filter(col => {
        // Verificar se a coluna cont√©m valores num√©ricos
        const sampleData = this.getSampleDataForColumn(col, data);
        return sampleData.some(val => !isNaN(Number(val)) && val !== '');
      });
      
      if (numericColumns.length > 0) {
        weightColumn = numericColumns[0];
        console.log(`‚úÖ Coluna de peso alternativa detectada (num√©rica): ${weightColumn}`);
      }
    }
    
    console.log('üìä Configura√ß√£o final de colunas:', {
      sourceColumn,
      targetColumn,
      relationshipColumn,
      weightColumn
    });
    
    return { sourceColumn, targetColumn, relationshipColumn, weightColumn };
  }
  
  // Buscar colunas por sin√¥nimos e varia√ß√µes comuns
  private static findColumnsBySynonyms(columns: string[], columnAnalysis: Record<string, any>): {
    sourceCol?: string;
    targetCol?: string;
  } {
    let sourceCol: string | undefined;
    let targetCol: string | undefined;
    
    // Sin√¥nimos para colunas de origem
    const sourceSynonyms = [
      'remetente', 'emissor', 'origem', 'primeiro', 'inicio', 'partida', 'de', 'from',
      'cliente', 'fornecedor', 'vendedor', 'comprador', 'pagador', 'recebedor',
      'pessoa1', 'entidade1', 'sujeito1', 'ator1', 'participante1'
    ];
    
    // Sin√¥nimos para colunas de destino
    const targetSynonyms = [
      'destinatario', 'receptor', 'destino', 'segundo', 'fim', 'chegada', 'para', 'to',
      'beneficiario', 'recebedor', 'cliente', 'fornecedor', 'vendedor', 'comprador',
      'pessoa2', 'entidade2', 'sujeito2', 'ator2', 'participante2'
    ];
    
    // Buscar por sin√¥nimos exatos
    for (const col of columns) {
      const colLower = col.toLowerCase();
      
      if (!sourceCol && sourceSynonyms.some(syn => colLower.includes(syn))) {
        sourceCol = col;
        console.log(`üîç Coluna de origem encontrada por sin√¥nimo: ${col}`);
      }
      
      if (!targetCol && targetSynonyms.some(syn => colLower.includes(syn))) {
        targetCol = col;
        console.log(`üîç Coluna de destino encontrada por sin√¥nimo: ${col}`);
      }
    }
    
    // Se ainda n√£o encontrou, buscar por padr√µes mais flex√≠veis
    if (!sourceCol || !targetCol) {
      for (const col of columns) {
        const colLower = col.toLowerCase();
        
        // Buscar por padr√µes de identifica√ß√£o
        if (!sourceCol && (
          colLower.includes('id') || 
          colLower.includes('codigo') || 
          colLower.includes('numero') ||
          colLower.includes('matricula') ||
          colLower.includes('registro')
        )) {
          sourceCol = col;
          console.log(`üîç Coluna de origem encontrada por padr√£o de ID: ${col}`);
        }
        
        // Buscar por padr√µes de nome/descri√ß√£o
        if (!targetCol && (
          colLower.includes('nome') || 
          colLower.includes('descricao') || 
          colLower.includes('titulo') ||
          colLower.includes('rotulo') ||
          colLower.includes('identificacao')
        )) {
          targetCol = col;
          console.log(`üîç Coluna de destino encontrada por padr√£o de nome: ${col}`);
        }
      }
    }
    
    return { sourceCol, targetCol };
  }
  
  // Analisar o conte√∫do real das colunas para identificar tipos
  private static analyzeColumnContent(columns: string[], data: Record<string, string | number | boolean>[]): Record<string, any> {
    const analysis: Record<string, any> = {};
    
    columns.forEach(column => {
      const sampleData = this.getSampleDataForColumn(column, data);
      const nonEmptyData = sampleData.filter(val => val !== '' && val !== null && val !== undefined);
      
      if (nonEmptyData.length === 0) {
        analysis[column] = { type: 'empty', uniqueValues: 0, sampleValues: [] };
        return;
      }
      
      // Analisar tipos de dados
      const types = new Set(nonEmptyData.map(val => typeof val));
      const uniqueValues = new Set(nonEmptyData).size;
      const sampleValues = nonEmptyData.slice(0, 5);
      
      // Detectar padr√µes espec√≠ficos
      let detectedType = 'unknown';
      let confidence = 0;
      
      // Verificar se √© CPF/CNPJ
      const cpfCnpjCount = nonEmptyData.filter(val => 
        /^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(String(val)) || 
        /^[A-Z]{2}\d{9}$/.test(String(val))
      ).length;
      if (cpfCnpjCount > 0) {
        detectedType = 'cpf_cnpj';
        confidence = cpfCnpjCount / nonEmptyData.length;
      }
      
      // Verificar se √© telefone
      const phoneCount = nonEmptyData.filter(val => 
        /^\(\d{2}\)\s?\d{4,5}-\d{4}$/.test(String(val))
      ).length;
      if (phoneCount > 0 && phoneCount / nonEmptyData.length > 0.3) {
        detectedType = 'phone';
        confidence = phoneCount / nonEmptyData.length;
      }
      
      // Verificar se √© email
      const emailCount = nonEmptyData.filter(val => 
        /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(String(val))
      ).length;
      if (emailCount > 0 && emailCount / nonEmptyData.length > 0.3) {
        detectedType = 'email';
        confidence = emailCount / nonEmptyData.length;
      }
      
      // Verificar se √© num√©rico
      const numericCount = nonEmptyData.filter(val => !isNaN(Number(val))).length;
      if (numericCount / nonEmptyData.length > 0.7) {
        detectedType = 'numeric';
        confidence = numericCount / nonEmptyData.length;
      }
      
      // Verificar se √© texto (nomes, endere√ßos, etc.)
      const textCount = nonEmptyData.filter(val => 
        typeof val === 'string' && val.length > 2 && val.length < 100
      ).length;
      if (textCount / nonEmptyData.length > 0.7 && detectedType === 'unknown') {
        detectedType = 'text';
        confidence = textCount / nonEmptyData.length;
      }
      
      analysis[column] = {
        type: detectedType,
        confidence,
        uniqueValues,
        sampleValues,
        totalValues: nonEmptyData.length,
        types: Array.from(types)
      };
    });
    
    return analysis;
  }
  
  // Selecionar colunas baseado na an√°lise de conte√∫do
  private static selectColumnsByContent(columnAnalysis: Record<string, any>): {
    sourceCol?: string;
    targetCol?: string;
  } {
    let sourceCol: string | undefined;
    let targetCol: string | undefined;
    
    // Prioridade para origem: CPF/CNPJ, telefone, email, ou coluna com muitos valores √∫nicos
    const sourceCandidates = Object.entries(columnAnalysis)
      .filter(([col, analysis]) => 
        analysis.type === 'cpf_cnpj' || 
        analysis.type === 'phone' || 
        analysis.type === 'email' ||
        (analysis.type === 'text' && analysis.uniqueValues > 10)
      )
      .sort((a, b) => (b[1].confidence || 0) - (a[1].confidence || 0));
    
    if (sourceCandidates.length > 0) {
      sourceCol = sourceCandidates[0][0];
    }
    
    // Prioridade para destino: texto (nomes, endere√ßos) ou coluna com valores √∫nicos
    const targetCandidates = Object.entries(columnAnalysis)
      .filter(([col, analysis]) => 
        analysis.type === 'text' || 
        (analysis.uniqueValues > 5 && analysis.type !== 'numeric')
      )
      .sort((a, b) => (b[1].uniqueValues || 0) - (a[1].uniqueValues || 0));
    
    if (targetCandidates.length > 0) {
      // Evitar usar a mesma coluna para origem e destino
      const availableTargets = targetCandidates.filter(([col]) => col !== sourceCol);
      if (availableTargets.length > 0) {
        targetCol = availableTargets[0][0];
      } else {
        targetCol = targetCandidates[0][0];
      }
    }
    
    return { sourceCol, targetCol };
  }
  
  // Obter dados de exemplo para uma coluna espec√≠fica
  private static getSampleDataForColumn(columnName: string, data: Record<string, string | number | boolean>[]): any[] {
    try {
      // Pegar at√© 50 valores da coluna para an√°lise mais precisa
      const sampleSize = Math.min(50, data.length);
      const sampleData = [];
      
      // Pegar valores distribu√≠dos ao longo do arquivo (n√£o s√≥ os primeiros)
      const step = Math.max(1, Math.floor(data.length / sampleSize));
      
      for (let i = 0; i < sampleSize && i * step < data.length; i++) {
        const index = i * step;
        if (data[index] && data[index][columnName] !== undefined) {
          sampleData.push(data[index][columnName]);
        }
      }
      
      // Se n√£o conseguiu pegar dados suficientes, pegar os primeiros
      if (sampleData.length < 10) {
        for (let i = 0; i < Math.min(20, data.length); i++) {
          if (data[i] && data[i][columnName] !== undefined) {
            sampleData.push(data[i][columnName]);
          }
        }
      }
      
      return sampleData;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao obter dados de exemplo para coluna ${columnName}:`, error);
      return [];
    }
  }
  
  // Gerar grafo com mapeamento personalizado
  static generateCustomGraph(
    parsedData: ParsedData,
    sourceColumn: string,
    targetColumn: string,
    relationshipColumn?: string,
    weightColumn?: string
  ): LinkGraph {
    try {
      console.log('üîç Gerando grafo personalizado...');
      console.log('üìä Configura√ß√£o:', {
        sourceColumn,
        targetColumn,
        relationshipColumn,
        weightColumn,
        totalRows: parsedData.totalRows,
        columns: parsedData.columns
      });
      
      // Validar colunas
      if (!parsedData.columns.includes(sourceColumn)) {
        throw new Error(`Coluna de origem "${sourceColumn}" n√£o encontrada`);
      }
      
      if (!parsedData.columns.includes(targetColumn)) {
        throw new Error(`Coluna de destino "${targetColumn}" n√£o encontrada`);
      }
      
      if (relationshipColumn && !parsedData.columns.includes(relationshipColumn)) {
        throw new Error(`Coluna de relacionamento "${relationshipColumn}" n√£o encontrada`);
      }
      
      if (weightColumn && !parsedData.columns.includes(weightColumn)) {
        throw new Error(`Coluna de peso "${weightColumn}" n√£o encontrada`);
      }
      
      // Gerar grafo
      const graph = LinkGraphGenerator.generateGraph(
        parsedData.data,
        sourceColumn,
        targetColumn,
        relationshipColumn,
        weightColumn
      );
      
      console.log('‚úÖ Grafo personalizado gerado com sucesso');
      
      return graph;
      
    } catch (error) {
      console.error('‚ùå Erro ao gerar grafo personalizado:', error);
      throw error;
    }
  }
  
  // Analisar grafo com IA (GROQ)
  static async analyzeGraphWithAI(graph: LinkGraph): Promise<string> {
    try {
      console.log('ü§ñ Iniciando an√°lise de IA do grafo...');

      // Preparar dados para an√°lise
      const analysisData = {
        totalNodes: graph.metadata.totalNodes,
        totalEdges: graph.metadata.totalEdges,
        nodeTypes: graph.metadata.nodeTypes,
        edgeTypes: graph.metadata.edgeTypes,
        density: graph.metadata.density,
        averageDegree: graph.metadata.averageDegree,
        topNodes: graph.nodes
          .sort((a, b) => b.degree - a.degree)
          .slice(0, 10)
          .map(n => ({ id: n.id, type: n.type, degree: n.degree })),
        sampleEdges: graph.edges.slice(0, 20).map(e => ({
          source: e.source,
          target: e.target,
          type: e.type,
          weight: e.weight
        }))
      };

      // Criar prompt para IA
      const prompt = `Analise o seguinte grafo de v√≠nculos e forne√ßa insights investigativos:

**M√©tricas do Grafo:**
- Total de entidades: ${analysisData.totalNodes}
- Total de relacionamentos: ${analysisData.totalEdges}
- Densidade: ${analysisData.density.toFixed(3)}
- Grau m√©dio: ${analysisData.averageDegree.toFixed(2)}

**Tipos de Entidades:** ${analysisData.nodeTypes.join(', ')}
**Tipos de Relacionamentos:** ${analysisData.edgeTypes.join(', ')}

**Top 10 Entidades por Conectividade:**
${analysisData.topNodes.map(n => `- ${n.id} (${n.type}): ${n.degree} conex√µes`).join('\n')}

**Amostra de Relacionamentos:**
${analysisData.sampleEdges.map(e => `- ${e.source} ‚Üí ${e.target} [${e.type}] (peso: ${e.weight})`).join('\n')}

**An√°lise Investigativa:**
Identifique padr√µes suspeitos, clusters de interesse, entidades centrais, poss√≠veis intermedi√°rios e anomalias que merecem investiga√ß√£o adicional.`;

      // Usar o servi√ßo GROQ diretamente
      try {
        console.log('üì° Enviando dados para an√°lise GROQ...');
        
        // Formatar mensagem no formato correto para a API GROQ
        const messages = [
          {
            role: 'system',
            content: 'Voc√™ √© um analista especializado em investiga√ß√£o criminal e an√°lise de v√≠nculos. Analise os dados fornecidos e forne√ßa insights investigativos detalhados.'
          },
          {
            role: 'user',
            content: prompt
          }
        ];
        
        const response = await makeGroqAIRequest(
          messages,
          2048
        );
        
        console.log('‚úÖ Resposta da GROQ recebida:', response);
        
        // Formatar a resposta da IA
        const aiAnalysis = `ü§ñ **AN√ÅLISE DE IA - GROQ LLAMA 4 SCOUT 17B**

**INSIGHTS INVESTIGATIVOS:**

${response}

**Dados Analisados:**
- **Total de Entidades:** ${analysisData.totalNodes}
- **Total de Relacionamentos:** ${analysisData.totalEdges}
- **Densidade do Grafo:** ${analysisData.density.toFixed(3)}
- **Grau M√©dio:** ${analysisData.averageDegree.toFixed(2)}

**Tipos de Entidades Identificadas:** ${analysisData.nodeTypes.join(', ')}
**Tipos de Relacionamentos:** ${analysisData.edgeTypes.join(', ')}

**An√°lise Realizada em:** ${new Date().toLocaleString('pt-BR')}`;

        return aiAnalysis;
        
      } catch (groqError) {
        console.warn('‚ö†Ô∏è Erro na API GROQ, usando an√°lise simulada:', groqError);
        
        // Fallback para an√°lise simulada
        const aiAnalysis = `ü§ñ **AN√ÅLISE DE IA - GRAFO DE V√çNCULOS**

**INSIGHTS INVESTIGATIVOS:**

üîç **Padr√µes Identificados:**
- O grafo possui ${analysisData.totalNodes} entidades com ${analysisData.totalEdges} relacionamentos
- Densidade de ${analysisData.density.toFixed(3)} indica ${analysisData.density > 0.1 ? 'alta' : 'baixa'} conectividade
- Grau m√©dio de ${analysisData.averageDegree.toFixed(2)} sugere ${analysisData.averageDegree > 5 ? 'forte' : 'moderada'} intera√ß√£o

üéØ **Entidades de Alto Interesse:**
${analysisData.topNodes.slice(0, 5).map(n => `- **${n.id}** (${n.type}): ${n.degree} conex√µes - Investigar profundamente`).join('\n')}

‚ö†Ô∏è **Anomalias Detectadas:**
- Entidades com grau muito alto podem ser intermedi√°rios ou hubs
- Padr√µes de relacionamento repetitivos sugerem opera√ß√µes sistem√°ticas
- Clusters isolados podem indicar grupos independentes

üìä **Recomenda√ß√µes Investigativas:**
1. Focar nas entidades com maior grau de conectividade
2. Analisar padr√µes temporais nos relacionamentos
3. Investigar entidades com tipos espec√≠ficos (CPF, Placa, etc.)
4. Mapear caminhos entre entidades de interesse
5. Identificar poss√≠veis intermedi√°rios ou facilitadores

**Pr√≥ximos Passos:**
- Aprofundar an√°lise das entidades centrais
- Correlacionar com dados temporais
- Expandir investiga√ß√£o para entidades secund√°rias
- Gerar relat√≥rio detalhado para autoridades

**Nota:** Esta √© uma an√°lise simulada devido a erro na API GROQ: ${groqError instanceof Error ? groqError.message : 'Erro desconhecido'}`;

        return aiAnalysis;
      }

    } catch (error) {
      console.error('‚ùå Erro na an√°lise de IA:', error);
      throw new Error(`Falha na an√°lise de IA: ${error.message}`);
    }
  }
}
